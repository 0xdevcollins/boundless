datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  OTP           OTP[]
  projects      Project[]
  Vote          Vote[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Project {
// id          String   @id @default(cuid())
// title       String
// description String
// createdAt   DateTime @default(now())
// updatedAt   DateTime @updatedAt
// votes       Vote[]
// }

model Project {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String
  fundingGoal  Int
  category     String
  bannerUrl    String?
  profileUrl   String?
  blockchainTx String?
  createdAt    DateTime @default(now())
  votes        Vote[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}
