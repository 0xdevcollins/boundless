datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  OTP           OTP[]
  projects      Project[]
  Vote          Vote[]
  TeamMember    TeamMember[]
  comments      Comment[]
  reactions     CommentReaction[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ValidationStatus {
  PENDING
  REJECTED
  VALIDATED
}

model Project {
  id             String           @id @default(cuid())
  userId         String
  title          String
  description    String
  fundingGoal    Int
  category       String
  bannerUrl      String?
  profileUrl     String?
  blockchainTx   String?
  ideaValidation ValidationStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  votes          Vote[]
  teamMembers    TeamMember[]
  comments       Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id           String   @id @default(cuid())
  fullName     String
  role         String
  bio          String?  @db.Text
  profileImage String?
  github       String?
  twitter      String?
  discord      String?
  linkedin     String?
  projectId    String
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([userId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
  
  reactions CommentReaction[]
  
  @@index([projectId])
  @@index([userId])
  @@index([parentId])
}

model CommentReaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  
  comment   Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}