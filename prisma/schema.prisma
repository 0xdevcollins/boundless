datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)

  // Profile fields
  username           String? @unique
  bio                String? @db.Text
  bannerImage        String?
  twitter            String?
  linkedin           String?
  totalContributions Int     @default(0)

  // Settings fields
  language             String?  @default("en")
  notificationsEnabled Boolean? @default(true)

  accounts      Account[]
  sessions      Session[]
  OTP           OTP[]
  projects      Project[]
  Vote          Vote[]
  TeamMember    TeamMember[]
  comments      Comment[]
  reactions     CommentReaction[]
  notifications Notification[]
  posts         Post[]
  postComments  PostComment[]
  fundings      Funding[]

  @@index([username])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ValidationStatus {
  PENDING
  REJECTED
  VALIDATED
}

model Project {
  id             String           @id @default(cuid())
  userId         String
  title          String
  description    String
  fundingGoal    Int
  category       String
  bannerUrl      String?
  profileUrl     String?
  blockchainTx   String?
  isApproved     Boolean          @default(false)
  ideaValidation ValidationStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  pitchDeck      String?
  whitepaper     String?
  votes          Vote[]
  teamMembers    TeamMember[]
  comments       Comment[]
  milestones     Milestone[]
  fundings       Funding[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id           String   @id @default(cuid())
  fullName     String
  role         String
  bio          String?  @db.Text
  profileImage String?
  github       String?
  twitter      String?
  discord      String?
  linkedin     String?
  projectId    String
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([userId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  reactions CommentReaction[]

  @@index([projectId])
  @@index([userId])
  @@index([parentId])
}

model CommentReaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  timestamp   DateTime @default(now())
  isRead      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime?
  progress    Int      @default(0)
  color       String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  attachments MilestoneAttachment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MilestoneAttachment {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  featuredImage String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  
  tags        Tag[]     @relation("PostTags")
  comments    PostComment[]
  
  @@index([authorId])
  @@index([categoryId])
  @@index([published])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  posts       Post[]    @relation("PostTags")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PostComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  
  parent    PostComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  parentId  String?
  replies   PostComment[] @relation("CommentReplies")
  
  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Funding {
  id        String   @id @default(cuid())
  amount    Int
  status    FundingStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([projectId])
  @@index([userId])
}

enum FundingStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
